// 传统编译原理，分为三步
/*
* 1.分词/词法分析 将由字符组成的代码分解成词法单元
* 2.解析/语法分析 将词法单元流（数据）转换成抽象语法数（AST）
* 3.代码生成 将AST转换为可执行代码的过程就是代码生成。
* */

// 引擎 负责整个JS程序的编译和执行的过程。
// 编译器 语法分析&&代码执行
// 作用域 收集维护所有变量组成的一系列查询，确定当前执行代码对这些变量的执行权

/*
* 变量的赋值操作会执行两个动作
* 1，编译器会在当前作用域中声明一个变量（如果之前没有生命过）
* 2，引擎运行时，会在作用于中查询该变量，如果找到就会对它赋值。
* */

/*
* LHS 查询————赋值操作
* RHS 查询————查值操作
* */

// function foo(a) {
//   var b = a;
//   return a + b
// }
//
// var c = foo(2)

/*
* LHS C赋值 形参a赋值 b的赋值
* RHS foo查询 b=a，对a的查询 a查询 b查询
* */

// function foo(a) {
//   b = a
//   console.log(a + b)
// }
//
// foo(2)

// let obj = {
//   a: 1,
//   b: 2,
//   c: 3
// }
//
// with (obj) {
//   b = 5;
//   c = 6;
//   d = 7
// }
//
// console.log(obj, d)

// eval() 和 with 在运行时修改或创建新的作用域，进而影响性能
// 总之，不要使用eval() 和 width